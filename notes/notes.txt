Chap 1
C is written by machine code
The implementation of C involves compiling and linking.
The compilers compile the code to immediate code,
    and the linker links the immediate code to the machine code.
The machine code is then executed by the computer.

So your code is combined with the start-up code(The code that works as an
        interface between the OS and the C code) and the standard library code
Then all three is called the machine code when brought together with linker.

Chap 2
5 types of statement in C language:
1. Declaration
2. Assignment
3. Function
4. Control
5. Null

Chap03
3 type of adjective keywords to modify int type:
1. short -- use less space
2. long -- use more space
3. unsigned -- nonnegative values

Chap04
1. C has no variable type for string, instead it's an array of characters.
2. The string is terminated by a null character '\0', C use it to determine the
    end of the string.
3. So the length of the string is the number of characters before the null
    character. 
4. The number of bytes is the length of the string plus 1.
5. Array is an ordered collection of elements of the same type.
5. The string is a pointer to the first character of the string.
6. string "x" and character 'x' are different. The former is an array of
    characters, the latter is a single character. "x" contains 2 characters,'x'
    and '\0'.
7. sizeof operator returns the number of bytes of the variable;

strlen function returns the number of characters of the string.8. The
	scanf function uses whitespace to separate the input,
	so it can't read the string with whitespace.However,
	% c can read the whitespace. : q

									   Chap09 ptr = &bah val = *ptr->val = bah

		&is the address
		operator-- gives the address of the variable * is the indirection
		operator-- gives the value stored at the pointed - to address

			Example : nurse = 22 p_nurse = & nurse val_nurse = * p_nurse

						  the net effect is to assign the value 22 to val_nurse

							  declaring pointer
	: int * pi	// pi is a pointer to an integer variable
	  char * pc // pc is a pointer to a character variable
	  float * pf,
											  *pg // pf, pg are pointers to
												  // float variables

													  Chap10 Vector
	: int main(void) {
	int powers[8] = {1, 2, 4, 8, 16, 32, 64, 128};
}

In C99, youo can wus an index in brackets in the initialization list to specify
			an element : int arr[6] = [[5] = 212]; // initialize arr[5] to 212

dates + 2 ==
	&date[2] // same address
		* (dates + 2) ==
	dates[2] // same value
	The array name is also the address of the first element of the array
		.if flizny is an array : flizny
	==
	&flizny[0]

	handling arrays in function

	total = sum(marbles); // possible function call

int sum(int *ar); // Corresponding function prototype

int sum(int *ar) {
	int i;
	int total = 0;
	for (i = 0; i < 10; i++) { // assume 10 elements
		total += ar[i]		   // ar[i] the same as *(ar + i)
	}
	return total
}

For 2D array, you can : zippo[m][n] == *(*(zippo + m) + n) pz[m][n] ==
						*(*(pz + m) + n)

								Suming up a 1 -
							D array :
#include <stdio.h>
	int sum(int arr[], int size) {
	int total = 0;
	for (int i = 0; i < size; i++) {
		total += arr[i];
	}
	return total;
}

// How sum() will be used
int main() {
	int junk[3][4] = {{2, 4, 5, 8}, {3, 5, 6, 9}, {12, 10, 8, 6}};
	int total = 0;
	for (int i = 0; i < 3; i++) {
		total += sum(junk[i], 4);
	}
	printf("Total sum: %d\n", total);
	return 0;
}

Here is how to handle 2D array : void sumColumns(int arr[][4], int rows);
or : void sumColumns(int (*arr)[4], int rows);

void sumColumns(int arr[][4], int rows) {
	for (int j = 0; j < 4; j++) { // Loop over columns
		int colSum = 0;
		for (int i = 0; i < rows; i++) { // Loop over rows
			colSum += arr[i][j];
		}
		printf("Sum of column %d: %d\n", j, colSum);
	}
}

Let’s look at a simple example that shows how to write a function that will sum
		the contents of any two -
	dimensional array of ints.

	First,
	here’s how to declare a function with a two - dimensional VLA argument :

	int
	sum2d(int rows, int cols, int ar[rows][cols]); // ar a VLA

The C99 / C11 standard says you can omit names from the prototype;
but in that case, you need to replace the omitted dimensions with asterisks:

int sum2d(int, int, int ar[*][*]); // ar a VLA, names omitted

int sum2d(int rows, int cols, int ar[rows][cols]) {
	int r;
	int c;
	int tot = 0;
	for (r = 0; r < rows; r++)
		for (c = 0; c < cols; c++)
			tot += ar[r][c];
	return tot;
}

For arrays,
	a compound literal looks like an array initialization list preceded by a
		type name that is enclosed in parentheses.For example,
	here’s an ordinary array declaration :

	int diva[2] = {10, 20};

And here’s a compound literal that creates a nameless array containing the same
		two int values :

	(int[2]){10, 20} // a compound literal

	Note that the type name is what you would get
	if you removed diva from the earlier declara
	-
	tion,
	leaving int[2] behind.Just as you can leave out the array size
	if you initialize a named array,
	you can omit it from a compound literal,
	and the compiler will count how many elements are present :

	(int[]){50, 20, 90} // a compound literal with 3 elements

	If ar is an array,
	then the expressions ar[i] and
		*(ar + i) are equivalent.

		 // d. psa is an array of 20 pointers to char.
		 char *psd[20];
// e. pstr is a pointer to an array of 20 chars.
char (*pstr)[20];

Chap11 puts like printf but put newline character to the strings it displays,
	also it only displays strings
